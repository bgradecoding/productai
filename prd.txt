PRD: AI 기반 웹 페이지 생성기
1. 프로젝트 개요
1.1 프로젝트 명
Claude Web Generator
1.2 프로젝트 목적
사용자가 텍스트 설명이나 와이어프레임을 통해 웹 페이지를 설계하고, AI(Claude)를 활용해 실제 HTML/CSS/JavaScript 코드를 생성하여 실시간으로 미리볼 수 있는 도구
1.3 타겟 사용자

웹 개발자 (프로토타이핑 용도)
기획자/디자이너 (아이디어 구현 및 검증)
비개발자 (간단한 웹 페이지 제작)

2. 기술 스택
2.1 프론트엔드

React 18+ with TypeScript
Vite (빌드 도구)
Tailwind CSS (스타일링)
React DnD 또는 @dnd-kit (드래그 앤 드롭)

2.2 추가 라이브러리

Monaco Editor 또는 CodeMirror (코드 에디터)
Anthropic SDK (Claude API 호출)
React Hook Form (폼 관리)
Zustand 또는 Context API (상태 관리)

2.3 배포

클라이언트 사이드 렌더링 (CSR)
Vercel, Netlify 등 정적 호스팅

3. 핵심 기능
3.1 입력 모드
3.1.1 텍스트 입력 모드
기능 설명:

사용자가 자연어로 원하는 웹 페이지를 설명
마크다운 형식 지원
실시간 문자 수 카운터

UI 구성:
┌─────────────────────────────────┐
│  텍스트 입력 모드               │
├─────────────────────────────────┤
│  [큰 텍스트 에리어]             │
│                                 │
│  예시: "로그인 페이지를 만들어  │
│  주세요. 이메일과 비밀번호 입력 │
│  필드, 로그인 버튼이 필요합니다" │
│                                 │
├─────────────────────────────────┤
│  [생성하기 버튼]                │
└─────────────────────────────────┘
3.1.2 와이어프레임 모드
기능 설명:

드래그 앤 드롭으로 UI 컴포넌트 배치
각 컴포넌트에 설명 텍스트 추가 가능
컴포넌트 크기 조절 및 정렬

컴포넌트 팔레트:

Header
Navigation
Button
Input Field
Text Block
Image Placeholder
Card
Footer
Custom Box

UI 구성:
┌─────────────┬───────────────────┐
│ 컴포넌트    │  캔버스 영역      │
│ 팔레트      │                   │
│             │  [드래그된        │
│ [Header]    │   컴포넌트들]     │
│ [Button]    │                   │
│ [Input]     │                   │
│ [Text]      │                   │
│ [Image]     │                   │
│ [Card]      │                   │
│             │                   │
├─────────────┴───────────────────┤
│ 선택된 컴포넌트 속성 패널       │
│ 텍스트: [입력 필드]             │
│ 스타일: [드롭다운]              │
└─────────────────────────────────┘
3.2 코드 생성 및 미리보기
3.2.1 Claude API 통합
기능:

입력된 정보를 Claude에게 전달
HTML, CSS, JavaScript 코드 생성 요청
응답 파싱 및 오류 처리

API 호출 플로우:

사용자 입력 수집
프롬프트 생성
Claude API 호출
응답 파싱
코드 분리 (HTML/CSS/JS)
미리보기 렌더링

3.2.2 실시간 미리보기
기능:

생성된 코드를 iframe에서 실시간 렌더링
반응형 디자인 테스트 (모바일/태블릿/데스크톱)
오류 처리 및 표시

3.3 코드 에디터
기능:

생성된 코드 편집 가능
실시간 미리보기 업데이트
코드 다운로드 기능

4. 화면 구성
4.1 메인 레이아웃
┌─────────────────────────────────────────────────────────────┐
│                    상단 네비게이션                          │
│  [로고] [텍스트 모드] [와이어프레임 모드] [설정]           │
├─────────────────────────┬───────────────────────────────────┤
│                         │                                   │
│      입력 영역          │        미리보기 영역             │
│                         │                                   │
│   [선택된 모드에 따른   │   [생성된 페이지 미리보기]        │
│    입력 인터페이스]     │                                   │
│                         │   [모바일/태블릿/데스크톱 토글]   │
│                         │                                   │
├─────────────────────────┼───────────────────────────────────┤
│                         │                                   │
│   [생성하기 버튼]       │        코드 에디터               │
│                         │                                   │
│                         │   [HTML] [CSS] [JavaScript] 탭    │
│                         │                                   │
│                         │   [코드 내용]                    │
│                         │                                   │
└─────────────────────────┴───────────────────────────────────┘
4.2 반응형 디자인

데스크톱: 좌우 분할 레이아웃
태블릿: 상하 분할 또는 탭 방식
모바일: 단일 화면, 탭 네비게이션

5. 데이터 구조
5.1 프로젝트 상태
typescriptinterface Project {
  id: string;
  name: string;
  mode: 'text' | 'wireframe';
  textInput?: string;
  wireframeData?: WireframeData;
  generatedCode: {
    html: string;
    css: string;
    javascript: string;
  };
  createdAt: Date;
  updatedAt: Date;
}

interface WireframeData {
  components: Component[];
  canvas: {
    width: number;
    height: number;
  };
}

interface Component {
  id: string;
  type: 'header' | 'button' | 'input' | 'text' | 'image' | 'card';
  position: { x: number; y: number };
  size: { width: number; height: number };
  properties: Record<string, any>;
  text?: string;
}
5.2 로컬 스토리지

프로젝트 목록
사용자 설정
API 키 (암호화)

6. 개발 단계
6.1 Phase 1: 기본 구조 (1주)

프로젝트 셋업 (Vite + React + TypeScript)
기본 레이아웃 구성
텍스트 입력 모드 구현

6.2 Phase 2: Claude 통합 (1주)

Claude API 연동
코드 생성 및 파싱
미리보기 렌더링

6.3 Phase 3: 와이어프레임 모드 (2주)

드래그 앤 드롭 구현
컴포넌트 팔레트 구성
와이어프레임 데이터 처리

6.4 Phase 4: 코드 에디터 (1주)

코드 에디터 통합
실시간 미리보기 업데이트
코드 다운로드 기능

6.5 Phase 5: 최적화 및 테스트 (1주)

성능 최적화
오류 처리 개선
사용자 테스트

7. 기술적 고려사항
7.1 보안

Claude API 키 보안 저장
XSS 공격 방지 (생성된 코드 샌드박싱)
CSP (Content Security Policy) 적용

7.2 성능

코드 생성 시 로딩 상태 표시
디바운싱으로 API 호출 최적화
메모리 관리 (큰 프로젝트 처리)

7.3 사용자 경험

직관적인 UI/UX
오류 메시지 개선
키보드 단축키 지원

8. 성공 지표
8.1 기능적 지표

코드 생성 성공률 > 90%
평균 응답 시간 < 10초
사용자 만족도 > 4.0/5.0

8.2 기술적 지표

페이지 로딩 시간 < 3초
메모리 사용량 < 100MB
오류 발생률 < 5%

9. 향후 확장 계획
9.1 추가 기능

템플릿 라이브러리
컴포넌트 재사용
버전 관리
팀 협업 기능

9.2 기술 개선

PWA 지원
오프라인 모드
더 많은 AI 모델 지원
